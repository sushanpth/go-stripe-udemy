{{template "base" .}}

{{define "title"}}
  Virtual Terminal
{{end}}

{{define "content"}}
  <h2 class="text-center">Virtual Terminal</h2>
  <hr>

  <div id="card-messages" class="alert alert-danger text-center d-none"></div>
  <form action="" method="post"
  name="charge_form" id="charge_form"
  class="d-block needs-validation charge-form"
  autocomplete="off" novalidate="">

    <div class="mb-3 form-group">
      <label for="charge_amount" class="form-label">Amount</label>
      <input type="text" id="charge_amount" class="form-control"
      required="" autocomplete="amount-new">
    </div>

    <div class="mb-3 form-group">
      <label for="cardholder-name" class="form-label">Cardholder Name</label>
      <input type="text" name="cardholder_name" id="cardholder-name" class="form-control"
      required="" autocomplete="cardholder-name-new">
    </div>

    <div class="mb-3 form-group">
      <label for="cardholder-email" class="form-label">Cardholder Email</label>
      <input type="email" name="cardholder_email" id="cardholder-email" class="form-control"
      required="" autocomplete="cardholder-email-new">
    </div>

    <div class="mb-3 form-group">
      <label for="card-element" class="form-label">Credit Card</label>
      <div id="card-element" class="form-control"></div>
      <div id="card-errors" class="alert p-1 d-none alert-danger text-center" role="alert"></div>
      <div id="card-success" class="alert p-1 d-none alert-success text-center" role="alert"></div>
    </div>
    <hr>
    <a href="javascript:void(0)" onclick="val()" id="pay-button" class="btn btn-primary">Charge Card</a>
    <div id="processing-payment" class="text-center d-none">
      <div class="spinner-border text-primary" role="status">
        <div class="visually-hidden">Loading...</div>
      </div>
    </div>
    <input type="hidden" name="amount" id="amount">
    <input type="hidden" name="payment_intent" id="payment_intent">
    <input type="hidden" name="payment_method" id="payment_method">
    <input type="hidden" name="payment_amount" id="payment_amount">
    <input type="hidden" name="payment_currency" id="payment_currency">
  </form>

  <div class="row">
    <div class="col-md-6 offset-md-3 d-none" id="receipt">
      <h3 class="mt-3 text-center">Receipt</h3>
      <hr>
      <p>
        <strong>Bank Return Code</strong>:
        <span id="bank-return-code"></span>
      </p>
      <p>
        <a href="/virtual-terminal" class="btn btn-primary">
          Charge another card
        </a>
      </p>
    </div>
  </div>
{{end}}

{{define "js"}}
<script>
  checkAuth();
  document.getElementById("charge_amount").addEventListener("change", function(evt){
    if (evt.target.value != ""){
      document.getElementById("amount").value = parseInt((evt.target.value * 100), 10)
    }else{
      document.getElementById("amount").value = 0
    }
  })
  
</script>
  
  <script src="https://js.stripe.com/v3/"></script>
  <script>
    let cardElement;
    const cardMessages = document.getElementById("card-messages");
    const payButton = document.getElementById("pay-button");
    const processing = document.getElementById("processing-payment")

    let stripe = Stripe({{ .StripePublishableKey }});

    function hidePayButton(){
      payButton.classList.add("d-none")
      processing.classList.remove("d-none")
    }

    function showPayButtons(){
      payButton.classList.remove("d-none")
      processing.classList.add("d-none")
    }

    function showCardError(msg){
      cardMessages.classList.add("alert-danger")
      cardMessages.classList.remove("alert-success")
      cardMessages.classList.remove("d-none")
      cardMessages.innerText = msg
    }

    function showCardSuccess(){
      cardMessages.classList.remove("alert-danger")
      cardMessages.classList.add("alert-success")
      cardMessages.classList.remove("d-none")
      cardMessages.innerText = "Transaction successful"
    }

    function val(){
      let form = document.getElementById("charge_form")
      if (form.checkValidity() === false){
        this.event.preventDefault()
        this.event.stopPropagation()
        form.classList.add("was-validated")
        return;
      }
      form.classList.add("was-validated")
      hidePayButton()

      let amountToCharge = document.getElementById("amount").value
      let payload = {
        amount: amountToCharge,
        currency: 'usd'
      }
      const requestOptions = {
        method: 'post',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      }

      fetch("{{.API }}/api/payment-intent", requestOptions)
        .then(response => response.text())
        .then(response => {
          let data;
          try {
            data = JSON.parse(response)
            // console.log(data)
            stripe.confirmCardPayment(data.client_secret, {
              payment_method: {
                card: cardElement,
                billing_details: {
                  name: document.getElementById("cardholder-name").value,

                }
              }
            }).then(function(result) {
              console.log(result)
              if (result.error){
                // card declined or something went wrong with the card
                showCardError(result.error.message)
                showPayButtons()
              } else if (result.paymentIntent) {
                if (result.paymentIntent.status === "succeeded"){
                  // we have charged the card
                  
                  processing.classList.add("d-none")
                  showCardSuccess()
                  {{/* document.getElementById("charge_form").submit() */}}
                  saveTransaction(result)
                }
              }
            })
          } catch (err){
            console.log(err)
            showCardError("Invalid response from payment gategay")
            showPayButtons()
          }
        })
    }

    function saveTransaction(result){
      let payload = {
        amount: parseInt(document.getElementById("amount").value, 10)
        currency: result.paymentIntent.currency,
        first_name: "",
        last_name: "",
        email: document.getElementById("cardholder-email").value,
        payment_intent: result.paymentIntent.id,
        payment_method: result.paymentIntent.payment_method,
      }

      let token = localStorage.getItem("token")
      const requestOptions = {
        method: "post",
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + token,
        },
        body: JSON.stringify(payload),
      }

      fetch("{{.API}}/api/admin/virtual-terminal-succedded", requestOptions)
      .then(response => response.json())
      .then(function(data){
        console.log(data);
        processing.classList.add("d-none");
        showCardSuccess();
        document.getElementById("bank-return-code").innerHTML = data.bank_return_code
        document.getElementById("receipt").classList.remove("d-none")
      })
    }

    (function(){
      // create stripe & elements 
      const elements = stripe.elements();
      const style = {
        base: {
          fontSize: '16px',
          lineHeight: '24px',
        }
      }

      // create card entry
      cardElement = elements.create('card', {
        style: style,
        hidePostalCode: true,
      });
      cardElement.mount("#card-element");

      // check for input errors
      cardElement.addEventListener('change', function(event){
        let displayError = document.getElementById("card-errors")
        if (event.error){
          displayError.classList.remove('d-none');
          displayError.textContent = event.error.message;
        } else {
          displayError.classList.add('d-none');
          displayError.textContent = "";
        }
      })
    })(); // end anonymous function
  </script>
{{end}}